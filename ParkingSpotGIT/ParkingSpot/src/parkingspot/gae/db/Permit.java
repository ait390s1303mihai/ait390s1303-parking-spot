/**
 * Copyright 2013 -
 * Licensed under the Academic Free License version 3.0
 * http://opensource.org/licenses/AFL-3.0
 * 
 * Authors: Mihai Boicu, ...
 */

package parkingspot.gae.db;

import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import com.google.appengine.api.datastore.DatastoreService;
import com.google.appengine.api.datastore.DatastoreServiceFactory;
import com.google.appengine.api.datastore.Entity;
import com.google.appengine.api.datastore.FetchOptions;
import com.google.appengine.api.datastore.Key;
import com.google.appengine.api.datastore.KeyFactory;
import com.google.appengine.api.datastore.Query;
import com.google.appengine.api.datastore.Transaction;
import com.google.appengine.api.datastore.Query.Filter;
import com.google.appengine.api.datastore.Query.FilterOperator;
import com.google.appengine.api.datastore.Query.FilterPredicate;

/**
 * GAE ENTITY UTIL CLASS: "Permit" <br>
 * PARENT: NONE <br>
 * KEY: A long Id generated by GAE <br>
 * FEATURES: <br>
 * - "name" a {@link String} with the name of the permit (e.g. "Faculty and Workers")<br>
 */

public class Permit {

	//
	// SECURITY
	//

	/**
	 * Private constructor to avoid instantiation.
	 */
	private Permit() {
	}

	//
	// KIND
	//

	/**
	 * The name of the Permit ENTITY KIND used in GAE.
	 */
	private static final String ENTITY_KIND = "Permit";

	//
	// KEY
	//

	/**
	 * Return the Key for a given Permit id given as String.
	 * 
	 * @param permitID A string with the permit ID (a long).
	 * @return the Key for this permitID.
	 */
	public static Key getKey(String permitID) {
		long id = Long.parseLong(permitID);
		Key permitKey = KeyFactory.createKey(ENTITY_KIND, id);
		return permitKey;
	}

	/**
	 * Return the string ID corresponding to the key for the permit.
	 * 
	 * @param campus The GAE Entity storing the permit.
	 * @return A string with the permit ID (a long).
	 */
	public static String getStringID(Entity permit) {
		return Long.toString(permit.getKey().getId());
	}

	//
	// NAME
	//

	/**
	 * The property name for the <b>name</b> of the permit.
	 */
	private static final String NAME_PROPERTY = "name";

	/**
	 * Return the name of the permit.
	 * 
	 * @param permit The GAE Entity storing the name
	 * @return the name of the permit.
	 */
	public static String getName(Entity permit) {
		Object name = permit.getProperty(NAME_PROPERTY);
		if (name == null)
			name = "";
		return (String) name;
	}

	/**
	 * The regular expression pattern for the name of the permit
	 */
	private static final Pattern NAME_PATTERN = Pattern.compile("\\A[A-Za-z]+([ -][A-Za-z]+){0,10}\\Z");

	/**
	 * Check if the name is correct for a permit.
	 * 
	 * @param name The checked string.
	 * @return true is the name is correct.
	 */
	public static boolean checkName(String name) {
		Matcher matcher = NAME_PATTERN.matcher(name);
		return matcher.find();
	}

	//
	// CREATE PERMIT
	//

	/**
	 * Create a new permit if the permitID is correct and none exists with this id.
	 * 
	 * @param permitID The id for this permit.
	 * @return the Entity created with this id or null if error
	 */
	public static Entity createPermit(String permitName) {
		Entity permit = null;
		DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();
		Transaction txn = datastore.beginTransaction();
		try {

			if (!checkName(permitName)) {
				return null;
			}

			permit = getPermitWithName(permitName);
			if (permit != null) {
				return null;
			}

			permit = new Entity(ENTITY_KIND);
			permit.setProperty(NAME_PROPERTY, permitName);
			datastore.put(permit);

			txn.commit();
		} catch (Exception e) {
			return null;
		} finally {
			if (txn.isActive()) {
				txn.rollback();
			}
		}

		return permit;
	}

	//
	// GET PERMIT
	//

	/**
	 * Get the permit based on a string containing its long ID.
	 * 
	 * @param id A {@link String} containing the ID key (a <code>long</code> number)
	 * @return A GAE {@link Entity} for the Permit or <code>null</code> if none or error.
	 */
	public static Entity getPermit(String permitID) {
		Entity permit = null;
		try {
			DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();
			long id = Long.parseLong(permitID);
			Key permitKey = KeyFactory.createKey(ENTITY_KIND, id);
			permit = datastore.get(permitKey);
		} catch (Exception e) {
			// TODO log the error
		}
		return permit;
	}

	/**
	 * Get a permit based on a string containing its permitID.
	 * 
	 * @param permitID the ID of the permit as a String.
	 * @return A GAE {@link Entity} for the permit or <code>null</code> if none or error.
	 */
	public static Entity getPermitWithName(String name) {
		DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();
		return getPermitWithName(datastore, name);
	}

	/**
	 * Get a permit based on a string containing its permitID.
	 * 
	 * @param datastore The current datastore instance.
	 * @param permitID the ID of the permit as a String.
	 * @return A GAE {@link Entity} for the AdminProfile or <code>null</code> if none or error.
	 */
	public static Entity getPermitWithName(DatastoreService datastore, String name) {
		Entity permit = null;
		try {

			Filter hasPermitID = new FilterPredicate(NAME_PROPERTY, FilterOperator.EQUAL, name);
			Query query = new Query(ENTITY_KIND);
			query.setFilter(hasPermitID);
			List<Entity> result = datastore.prepare(query).asList(FetchOptions.Builder.withLimit(10));
			if (result != null && result.size() > 0) {
				permit = result.get(0);
			}
		} catch (Exception e) {
			// TODO log the error
		}
		return permit;
	}

	//
	// UPDATE PERMIT
	//

	/**
	 * Update the current description of the permit
	 * 
	 * @param permitID A string with the permit ID (a long).
	 * @param name The name of the permit as a String.
	 * @param fuelEfficient The fuel efficiency of the permit as a String(temp) [Boolean].
	 * @return true if succeed and false otherwise
	 */
	public static boolean updatePermitCommand(String permitID, String name) {
		Entity permit = null;
		try {
			permit = getPermit(permitID);
			permit.setProperty(NAME_PROPERTY, name);
			DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();
			datastore.put(permit);
		} catch (Exception e) {
			return false;
		}
		return true;
	}

	//
	// DELETE PERMIT
	//

	/**
	 * Delete the permit if not linked to anything else.
	 * 
	 * @param permitID A string with the permit ID (a long).
	 * @return True if succeed, false otherwise.
	 */
	public static boolean deletePermitCommand(String permitID) {
		try {
			DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();
			datastore.delete(getKey(permitID));
		} catch (Exception e) {
			return false;
		}
		return true;
	}

	//
	// QUERY PERMIT
	//

	/**
	 * Return the requested number of permits (e.g. 100).
	 * 
	 * @param limit The number of permits to be returned.
	 * @return A list of GAE {@link Entity entities}.
	 */
	public static List<Entity> getFirstPermits(int limit) {
		DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();
		Query query = new Query(ENTITY_KIND);
		List<Entity> result = datastore.prepare(query).asList(FetchOptions.Builder.withLimit(limit));
		return result;
	}

}
