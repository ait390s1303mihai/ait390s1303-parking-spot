
/**
 * Copyright 2013 -
 * Licensed under the Academic Free License version 3.0
 * 
 * Authors: Jeff Diederiks & Mihai Boicu
 */
package parkingspot.gae.db;

import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import com.google.appengine.api.datastore.Blob;
import com.google.appengine.api.datastore.DatastoreService;
import com.google.appengine.api.datastore.DatastoreServiceFactory;
import com.google.appengine.api.datastore.Entity;
import com.google.appengine.api.datastore.FetchOptions;
import com.google.appengine.api.datastore.Key;
import com.google.appengine.api.datastore.KeyFactory;
import com.google.appengine.api.datastore.Query;
import com.google.appengine.api.datastore.Transaction;
import com.google.appengine.api.datastore.Query.Filter;
import com.google.appengine.api.datastore.Query.FilterOperator;
import com.google.appengine.api.datastore.Query.FilterPredicate;

/**
 * 
 *	ENTITY KIND: "Building" <br>
 *	PARENT: Campus <br>
 *	KEY: A building Id generated by GAE <br>
 *	FEATURES: <br>
 *		"name" a {@link String} with the name of the building <br>
 *	Examples: <br>
 *	Campus("Johnson Center")
 *		"name" = "Johnson Center"
 */ 

public class Building {
	
	//
	// SECURITY
	//
	
	/**
	 * Private constructor to avoid instantiation.
	 */
	public Building() {
	}
	
	//
	// KIND
	//

	/**
	 * The name of the Building ENTITY KIND used in GAE.
	 */
	private static final String ENTITY_KIND = "Building";
	
	//
	// KEY
	//
	
	/**
	 * Return the Key for a given building id given as String.
	 * 
	 * @param campusId A string with the campus ID (a long).
	 * @param buildingId A string with the building ID (a long).
	 * @return the Key for this buildingID.
	 */
	public static Key getKey(String campusId, String buildingId) {
		Key campusKey = Campus.getKey(campusId);
		long id = Long.parseLong(buildingId);
		Key buildingKey = KeyFactory.createKey(campusKey, ENTITY_KIND, id);
		return buildingKey;
	}
	
	/**
	 * Return the string ID corresponding to the key for the building.
	 * 
	 * @param building The GAE Entity storing the building.
	 * @return A string with the building ID (a long).
	 */
	public static String getStringID(Entity building) {
		return Long.toString(building.getKey().getId());
	}

	//
	// NAME
	//

	/**
	 * The property name for the <b>name</b> of the building.
	 */
	private static final String NAME_PROPERTY = "name";

	/**
	 * Return the name of the building.
	 * 
	 * @param building The GAE Entity storing the building.
	 * @return the name of the building.
	 */
	public static String getName(Entity building) {
		return (String) building.getProperty(NAME_PROPERTY);
	}

	/**
	 * The regular expression pattern for the name of the building.
	 */
	private static final Pattern NAME_PATTERN = Pattern.compile("\\A[ \\w-'',]{3,100}\\Z");

	/**
	 * Check if the name is correct for a building.
	 * 
	 * @param name The checked string.
	 * @return true is the name is correct.
	 */
	public static boolean checkName(String name) {
		Matcher matcher = NAME_PATTERN.matcher(name);
		return matcher.find();
	}
	
	//
	// GOOGLE MAP LOCATION
	//

	/**
	 * The property name for the <b>google-map-location</b> of the building.
	 */
	private static final String GOOGLE_MAP_LOCATION = "google-map-location";

	/**
	 * Return the Google Map Location of the building.
	 * 
	 * @param building The building Entity for which the location is requested.
	 * @return A String with the Google Map syntax of the location.
	 */
	public static String getGoogleMapLocation(Entity building) {
		Object val = building.getProperty(GOOGLE_MAP_LOCATION);
		if (val == null)
			return "";
		return (String) val;
	}

	//
	// GOOGLE MAP FIGURE
	//

	private static final String GOOGLE_MAP_FIGURE = "google-map-figure";

	public static MapFigure getGoogleMapFigure(Entity building) {
		Object val = building.getProperty(GOOGLE_MAP_FIGURE);
		if (val == null)
			return new MapFigure(38.830376, -77.307143, 10, 38.830376, -77.307143);
		Blob blob = (Blob) val;
		return MapFigure.toMapFigure(blob);
	}

	public static void setGoogleMapFigure(Entity building, double lat, double lng, int z, double mkLat, double mkLng) {
		Blob blob = MapFigure.toBlob(new MapFigure(lat, lng, z, mkLat, mkLng));
		building.setProperty(GOOGLE_MAP_FIGURE, blob);
	}

	//
	// CREATE BUILDING
	//

	/**
	 * Create a new building if the name is correct and none exists with this name in the parent campus.
	 * 
	 * @param campusID the id of the parent campus.
	 * @param campusName The name for the campus.
	 * @return the Entity created with this name or null if error
	 */
	public static Entity createBuilding(String campusID, String buildingName) {
		Entity building = null;
		DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();
		Transaction txn = datastore.beginTransaction();
		try {

			Entity campus = Campus.getCampus(campusID);
			Key campusKey = campus.getKey();

			if (!checkName(buildingName)) {
				return null;
			}

			building = getBuildingWithName(campusID, buildingName);
			if (building != null) {
				return null;
			}

			MapFigure campusFigure = Campus.getGoogleMapFigure(campus);
			building = new Entity(ENTITY_KIND, campusKey);
			building.setProperty(NAME_PROPERTY, buildingName);
			setGoogleMapFigure(campus, campusFigure.latitude, campusFigure.longitude, campusFigure.zoom, campusFigure.latitude, campusFigure.longitude);
			datastore.put(building);

			txn.commit();
		} finally {
			if (txn.isActive()) {
				txn.rollback();
			}
		}

		return building;
	}

	//
	// GET BUILDING
	//

	/**
	 * Get a building based on a string containing its long ID and a string containing its parent id (campus).
	 * 
	 * @param campusID A {@link String} containing the ID key (a <code>long</code> number) for the parent campus
	 * @param buildingID A {@link String} containing the ID key (a <code>long</code> number) for the building
	 * @return A GAE {@link Entity} for the Building or <code>null</code> if none or error.
	 */
	public static Entity getBuilding(String campusID, String buildingID) {
		Entity building = null;
		try {
			DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();
			long id = Long.parseLong(buildingID);
			Key campusKey = Campus.getKey(campusID);
			Key buildingKey = KeyFactory.createKey(campusKey, ENTITY_KIND, id);
			building = datastore.get(buildingKey);
		} catch (Exception e) {
			// TODO log the error
		}
		return building;
	}

	/**
	 * Get a building based on a string containing its name.
	 * 
	 * @param campusId A {@link String} containing the ID key (a <code>long</code> number) for the parent campus
	 * @param name The name of the building as a String.
	 * @return A GAE {@link Entity} for the Campus or <code>null</code> if none or error.
	 */
	public static Entity getBuildingWithName(String campusId, String name) {
		DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();
		return getBuildingWithName(datastore, campusId, name);
	}

	/**
	 * Get a building based on a string containing its name.
	 * 
	 * @param datastore The current datastore instance.
	 * @param name The name of the building as a String.
	 * @return A GAE {@link Entity} for the Building or <code>null</code> if none or error.
	 */
	public static Entity getBuildingWithName(DatastoreService datastore, String campusId, String name) {
		Entity building = null;
		try {
			Key campusKey = Campus.getKey(campusId);
			Filter hasName = new FilterPredicate(NAME_PROPERTY, FilterOperator.EQUAL, name);
			Query query = new Query(ENTITY_KIND, campusKey);
			query.setFilter(hasName);
			List<Entity> result = datastore.prepare(query).asList(FetchOptions.Builder.withLimit(10));
			if (result != null && result.size() > 0) {
				building = result.get(0);
			}
		} catch (Exception e) {
			// TODO log the error
		}
		return building;
	}

	//
	// UPDATE BUILDING
	//

	/**
	 * Update the current description of the building.
	 * 
	 * @param campusID A string with the campus ID (a long).
	 * @param buildingId A {@link String} containing the ID key (a <code>long</code> number) for the building
	 * @param name The name of the building as a String.
	 * @param totalSpaces The number of places as a String.
	 * @param googleMapLocation The Google Map Location of the building as a String.
	 * @return true if succeed and false otherwise
	 */
	public static boolean updateBuildingCommand(String campusID, String buildingId, String name, 
			String googleMapLocation, String latString, String lngString, String zoomString, String mkLatString, String mkLngString) {
		Entity building = null;
		try {
			double lat=Double.parseDouble(latString);
			double lng=Double.parseDouble(lngString);
			int zoom=Integer.parseInt(zoomString);
			double mkLat=Double.parseDouble(mkLatString);
			double mkLng=Double.parseDouble(mkLngString);
			building = getBuilding(campusID, buildingId);
			building.setProperty(NAME_PROPERTY, name);
			building.setProperty(GOOGLE_MAP_LOCATION, googleMapLocation);
			setGoogleMapFigure(building, lat, lng, zoom, mkLat, mkLng);
			DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();
			datastore.put(building);
		} catch (Exception e) {
			return false;
		}
		return true;
	}

	//
	// DELETE BUILDING
	//

	/**
	 * Delete the building if empty (not linked to anything else).
	 * 
	 * @param campusID campusID A string with the campus ID (a long).
	 * @param buildingId A {@link String} containing the ID key (a <code>long</code> number) for the building
	 * @return True if succeed, false otherwise.
	 */
	public static boolean deleteBuildingCommand(String campusID, String buildingId) {
		try {
			DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();
			datastore.delete(getKey(campusID, buildingId));
		} catch (Exception e) {
			return false;
		}
		return true;
	}

	//
	// QUERY BUILDINGS
	//

	/**
	 * Return the requested number of buildings in the campus (e.g. 100).
	 * 
	 * @param campusID campusID A string with the campus ID (a long).
	 * @param limit The number of buildings to be returned.
	 * @return A list of GAE {@link Entity entities}.
	 */
	public static List<Entity> getFirstBuildings(String campusId, int limit) {
		DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();
		Query query = new Query(ENTITY_KIND, Campus.getKey(campusId));
		List<Entity> result = datastore.prepare(query).asList(FetchOptions.Builder.withLimit(limit));
		return result;
	}
	
}