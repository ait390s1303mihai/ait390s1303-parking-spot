/**
 * Copyright 2013 -
 * Licensed under the Academic Free License version 3.0
 * http://opensource.org/licenses/AFL-3.0
 * 
 * Authors: Mihai Boicu
 */
package parkingspot.gae.db;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

import com.google.appengine.api.datastore.Entity;
import com.google.appengine.api.datastore.Key;
import com.google.appengine.api.datastore.KeyFactory;

/**
 * GAE ENTITY UTIL CLASS: "AdminProfile" <br>
 * PARENT: NONE <br>
 * KEY: A long Id generated by GAE <br>
 * FEATURES: <br>
 * - "name" a {@link String} with the name of the admin (e.g. "John Doe")<br>
 * - "loginID" a {@link String} with the login ID of the admin (one of these, in this order: user id, email, external Open ID) <br>
 * - "rights" a serializable {@link AdminRights} data structure<br>
 */
public class AdminProfile {
	
	//
	// SECURITY
	//
	
	/**
	 * Private constructor to avoid instantiation.
	 */
	private AdminProfile() {
	}
	
	//
	// KIND
	//
	
	/**
	 * The name of the Admin Profile ENTITY KIND used in GAE.
	 */
	private static final String ENTITY_KIND = "AdminProfile";

	//
	// KEY
	//
	
	/**
	 * Return the Key for a given Admin Profile id given as String. 
	 * @param adminProfileID A string with the admin profile ID (a long).
	 * @return the Key for this adminProfileID. 
	 */
	public static Key getKey(String adminProfileID) {
		long id = Long.parseLong(adminProfileID);
		Key adminProfileKey = KeyFactory.createKey(ENTITY_KIND, id);
		return adminProfileKey;
	}
	
	/**
	 * Return the string ID corresponding to the key for the admin profile.
	 * @param campus The GAE Entity storing the admin profile.
	 * @return A string with the admin profile ID (a long).
	 */
	public static String getStringID(Entity adminProfile) {
		return Long.toString(adminProfile.getKey().getId());
	}
	
	//
	// NAME
	//
	
	/**
	 * The property name for the <b>name</b> of the admin profile.
	 */
	private static final String NAME_PROPERTY = "name";
	
	/**
	 * Return the name of the admin profile. 
	 * @param adminProfile The GAE Entity storing the admin profile.
	 * @return the admin profile of the campus. 
	 */
	public static String getName(Entity adminProfile) {
		return (String) adminProfile.getProperty(NAME_PROPERTY);
	}
	
	/**
	 * The regular expression pattern for the name of the admin profile.
	 */
	private static final Pattern NAME_PATTERN = Pattern.compile("\\A[A-Za-z]+([ -][A-Za-z]+){2,10}\\Z");
	
	/**
	 * Check if the name is correct for an admin profile. 
	 * @param name The checked string. 
	 * @return true is the name is correct. 
	 */
	public static boolean checkName(String name) {
		Matcher matcher=NAME_PATTERN.matcher(name);
		return matcher.find();
	}
	
	
	
}
